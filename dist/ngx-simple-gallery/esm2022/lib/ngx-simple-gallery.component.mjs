import { ChangeDetectionStrategy, Component, inject, input } from '@angular/core';
import { Constants } from './core/constants';
import { Dialog } from '@angular/cdk/dialog';
import { ShowcaseDialogComponent } from './showcase-dialog/showcase-dialog.component';
import * as i0 from "@angular/core";
export class NgxSimpleGalleryComponent {
    galleryItems = input.required({});
    thumbnailSize = input(Constants.defaultThumbnailSize);
    emptyMessage = input(Constants.defaultEmptyMessage);
    dialog = inject(Dialog);
    openDialog(galleryItem) {
        this.dialog.open(ShowcaseDialogComponent, {
            data: {
                galleryItem,
            },
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NgxSimpleGalleryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.9", type: NgxSimpleGalleryComponent, isStandalone: true, selector: "ngx-simple-gallery", inputs: { galleryItems: { classPropertyName: "galleryItems", publicName: "galleryItems", isSignal: true, isRequired: true, transformFunction: null }, thumbnailSize: { classPropertyName: "thumbnailSize", publicName: "thumbnailSize", isSignal: true, isRequired: false, transformFunction: null }, emptyMessage: { classPropertyName: "emptyMessage", publicName: "emptyMessage", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "<div class=\"gallery-wrapper\">\n  @for (image of galleryItems(); track image.src; let i = $index) {\n    <div role=\"presentation\" class=\"thumbnail-wrapper\" (click)=\"openDialog(image)\">\n      <img class=\"thumbnail-image\"\n           [src]=\"image.thumbnail ?? image.src\"\n           [width]=\"thumbnailSize()\"\n           [height]=\"thumbnailSize()\"\n           [alt]=\"'Gallery image ' + i\"/>\n    </div>\n  } @empty {\n    <div class=\"empty-message\">{{emptyMessage()}}</div>\n  }\n</div>\n", styles: [".gallery-wrapper{width:100%;display:flex;flex-wrap:wrap;justify-content:center;gap:1rem}.thumbnail-wrapper{cursor:pointer}.thumbnail-image{object-fit:cover}.empty-message{text-align:center;font-size:1.2rem}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NgxSimpleGalleryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-simple-gallery', standalone: true, imports: [], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"gallery-wrapper\">\n  @for (image of galleryItems(); track image.src; let i = $index) {\n    <div role=\"presentation\" class=\"thumbnail-wrapper\" (click)=\"openDialog(image)\">\n      <img class=\"thumbnail-image\"\n           [src]=\"image.thumbnail ?? image.src\"\n           [width]=\"thumbnailSize()\"\n           [height]=\"thumbnailSize()\"\n           [alt]=\"'Gallery image ' + i\"/>\n    </div>\n  } @empty {\n    <div class=\"empty-message\">{{emptyMessage()}}</div>\n  }\n</div>\n", styles: [".gallery-wrapper{width:100%;display:flex;flex-wrap:wrap;justify-content:center;gap:1rem}.thumbnail-wrapper{cursor:pointer}.thumbnail-image{object-fit:cover}.empty-message{text-align:center;font-size:1.2rem}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNpbXBsZS1nYWxsZXJ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaW1wbGUtZ2FsbGVyeS9zcmMvbGliL25neC1zaW1wbGUtZ2FsbGVyeS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2ltcGxlLWdhbGxlcnkvc3JjL2xpYi9uZ3gtc2ltcGxlLWdhbGxlcnkuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7O0FBV3RGLE1BQU0sT0FBTyx5QkFBeUI7SUFDN0IsWUFBWSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELGFBQWEsR0FBRyxLQUFLLENBQVMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDOUQsWUFBWSxHQUFHLEtBQUssQ0FBUyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpDLFVBQVUsQ0FBQyxXQUF3QjtRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUN4QyxJQUFJLEVBQUU7Z0JBQ0osV0FBVzthQUNaO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzt1R0FaVSx5QkFBeUI7MkZBQXpCLHlCQUF5QixtZ0JDZnRDLDRmQWFBOzsyRkRFYSx5QkFBeUI7a0JBVHJDLFNBQVM7K0JBRUUsb0JBQW9CLGNBQ2xCLElBQUksV0FDUCxFQUFFLG1CQUdNLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIGlucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHYWxsZXJ5SXRlbSB9IGZyb20gJy4vY29yZS9tb2RlbC9nYWxsZXJ5LWl0ZW0nO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tICdAYW5ndWxhci9jZGsvZGlhbG9nJztcbmltcG9ydCB7IFNob3djYXNlRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9zaG93Y2FzZS1kaWFsb2cvc2hvd2Nhc2UtZGlhbG9nLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ25neC1zaW1wbGUtZ2FsbGVyeScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtdLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LXNpbXBsZS1nYWxsZXJ5LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL25neC1zaW1wbGUtZ2FsbGVyeS5jb21wb25lbnQuY3NzJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5neFNpbXBsZUdhbGxlcnlDb21wb25lbnQge1xuICBwdWJsaWMgZ2FsbGVyeUl0ZW1zID0gaW5wdXQucmVxdWlyZWQ8R2FsbGVyeUl0ZW1bXT4oe30pO1xuICBwdWJsaWMgdGh1bWJuYWlsU2l6ZSA9IGlucHV0PG51bWJlcj4oQ29uc3RhbnRzLmRlZmF1bHRUaHVtYm5haWxTaXplKTtcbiAgcHVibGljIGVtcHR5TWVzc2FnZSA9IGlucHV0PHN0cmluZz4oQ29uc3RhbnRzLmRlZmF1bHRFbXB0eU1lc3NhZ2UpO1xuICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZyA9IGluamVjdChEaWFsb2cpO1xuXG4gIG9wZW5EaWFsb2coZ2FsbGVyeUl0ZW06IEdhbGxlcnlJdGVtKTogdm9pZCB7XG4gICAgdGhpcy5kaWFsb2cub3BlbihTaG93Y2FzZURpYWxvZ0NvbXBvbmVudCwge1xuICAgICAgZGF0YToge1xuICAgICAgICBnYWxsZXJ5SXRlbSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJnYWxsZXJ5LXdyYXBwZXJcIj5cbiAgQGZvciAoaW1hZ2Ugb2YgZ2FsbGVyeUl0ZW1zKCk7IHRyYWNrIGltYWdlLnNyYzsgbGV0IGkgPSAkaW5kZXgpIHtcbiAgICA8ZGl2IHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzcz1cInRodW1ibmFpbC13cmFwcGVyXCIgKGNsaWNrKT1cIm9wZW5EaWFsb2coaW1hZ2UpXCI+XG4gICAgICA8aW1nIGNsYXNzPVwidGh1bWJuYWlsLWltYWdlXCJcbiAgICAgICAgICAgW3NyY109XCJpbWFnZS50aHVtYm5haWwgPz8gaW1hZ2Uuc3JjXCJcbiAgICAgICAgICAgW3dpZHRoXT1cInRodW1ibmFpbFNpemUoKVwiXG4gICAgICAgICAgIFtoZWlnaHRdPVwidGh1bWJuYWlsU2l6ZSgpXCJcbiAgICAgICAgICAgW2FsdF09XCInR2FsbGVyeSBpbWFnZSAnICsgaVwiLz5cbiAgICA8L2Rpdj5cbiAgfSBAZW1wdHkge1xuICAgIDxkaXYgY2xhc3M9XCJlbXB0eS1tZXNzYWdlXCI+e3tlbXB0eU1lc3NhZ2UoKX19PC9kaXY+XG4gIH1cbjwvZGl2PlxuIl19